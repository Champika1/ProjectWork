<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/28/2023 5:10:36 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NB-CHAMPIKA"
  DTS:CreatorName="INTSOF\champika.tripathi"
  DTS:DTSID="{422A7B61-2672-4130-BB80-F11ECEC1F192}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3002.113"
  DTS:LocaleID="16393"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="283"
  DTS:VersionGUID="{BABA0BB7-7FD7-4961-B78C-DECFEA741B3E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Smart_Track_Database]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{6310BF07-B5EE-40FF-8DC2-2382F369DCC4}"
      DTS:ObjectName="Smart_Track_Database">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=172.16.1.41\SQL2016DB7;User ID=SmartTrack;Initial Catalog=Smarttrack_Prod_10062021;Persist Security Info=True;Application Name=SSIS-Package-{6310BF07-B5EE-40FF-8DC2-2382F369DCC4}172.16.1.41\SQL2016DB7.Smarttrack_Prod_10062021.SmartTrack;">
          <DTS:Password
            DTS:Name="Password"
            Sensitive="1"
            Encrypted="1">AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAmtJC+wr6BkC6/S3Q740T5gAAAAAIAAAARABUAFMAAAADZgAAwAAAABAAAACm35vwEseymdANBZTZJ+EBAAAAAASAAACgAAAAEAAAAPd1vf6zTHAn8pU3XH9koVYYAAAA5DaxCmacAdTl1HHUo8P5KmJdCeFXRRa1FAAAACVDuUKzPMV6WdZTRdy3KjAnbYnx</DTS:Password>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{01FDD373-4BFE-4B0E-8A73-961FB42E2AC1}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\ArchiveFolderIWM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DBCB1CAA-397C-47E9-8BC8-BFFBEFE7B3A0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ConnectionManagerName">
      <DTS:VariableValue
        DTS:DataType="8">Smart_Track_Database</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9554AA7F-905A-4091-8057-FAF0B28F034A}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExtension">
      <DTS:VariableValue
        DTS:DataType="8">.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F1AE26A0-4D75-44F8-A544-F5C41F48752C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8">TaskDependencyRecord.csv</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C88DFE93-5C1D-487A-B142-B49663D0ADA5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FilePath">
      <DTS:VariableValue
        DTS:DataType="8">D:\ParentChildTempIWM</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\IWM_Tracking_ParentChildJobId"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{B7EACBC6-F98E-484B-9D18-3B258A47FB39}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="IWM_Tracking_ParentChildJobId"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_8d04e4c49d884517917ccfdba4a49ab2"
          VSTAMajorVersion="15"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ArchiveFolder,User::ConnectionManagerName,User::FileExtension,User::FileName,User::FilePath">
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_8d04e4c49d884517917ccfdba4a49ab2")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_8d04e4c49d884517917ccfdba4a49ab2")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="packages.config"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Microsoft.VisualBasic" version="10.3.0" targetFramework="net45" />
</packages>]]></ProjectItem>
          <ProjectItem
            Name="ST_8d04e4c49d884517917ccfdba4a49ab2.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{6E511B8E-D4B0-4618-9AB2-DBE4B092B2BF}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_8d04e4c49d884517917ccfdba4a49ab2</RootNamespace>
    <AssemblyName>ST_8d04e4c49d884517917ccfdba4a49ab2</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.VisualBasic" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Data.DataSetExtensions" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using Microsoft.VisualBasic.FileIO;
#endregion

namespace ST_8d04e4c49d884517917ccfdba4a49ab2
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {

            try
            {

                string sourceFolderPath = Dts.Variables["FilePath"].Value.ToString();
                string[] csvFiles = Directory.GetFiles(sourceFolderPath, "*.csv");
                //string latestFile = csvFiles.OrderByDescending(f => new FileInfo(f).CreationTime).FirstOrDefault();    
                string latestFile = csvFiles[0];
                string fileName = Path.GetFileName(latestFile);
                string fileExtension = Dts.Variables["User::FileExtension"].Value.ToString();
                string archiveFolder = Dts.Variables["User::ArchiveFolder"].Value.ToString();
                string archiveFilePath = Path.Combine(archiveFolder, fileName.Replace(fileExtension, "") + fileExtension);
               
                string connectionManager = Dts.Variables["User::ConnectionManagerName"].Value.ToString();
                //string connectionString = Dts.Connections[Dts.Variables["User::ConnectionManagerName"].Value.ToString()].ConnectionString;


                // Read the entire file into memory at once
                //string[] lines = File.ReadAllLines(latestFile);
                List<string[]> lines = new List<string[]>();

                using (TextFieldParser parser = new TextFieldParser(latestFile))
                {
                    parser.TextFieldType = FieldType.Delimited;
                    parser.SetDelimiters(",");
                    parser.TrimWhiteSpace = true;
                    string[] headers = parser.ReadFields();

                    while (!parser.EndOfData)
                    {
                        string[] fields = parser.ReadFields();
                        
                            lines.Add(fields);
                        
                    }
                }


                // Create a DataTable for bulk inserting into the DependencyTable
                DataTable dataTable = new DataTable();
                dataTable.Columns.Add("Primary_Job_p", typeof(string));
                dataTable.Columns.Add("IWMJob__Child", typeof(string));
                DataTable dataTable1 = new DataTable();
                dataTable1.Columns.Add("CustomerProjectNumber", typeof(string));
                dataTable1.Columns.Add("IWMJobID", typeof(string));


                //var iwmJobChildQuery = from columns in lines
                //                       select new
                //                       {
                //                           IwmJobAsChild = columns.Length > 0 ? columns[0].Replace("'", "") : "",
                //                           PrimaryJobAsParent = columns.Length > 35 ? columns[35].Replace("'", "") : "",
                //                           PaceJobAsCustomerN = columns.Length > 46 ? columns[46].Replace("'", "") : ""
                //                       };



                //var iwmJobChildQuery = from columns in lines
                //                       where columns.Length > 0 && columns.Length > 35 && columns.Length > 46 // check if all required columns are present
                //                       let iwmJobAsChild = columns[0].Replace("'", "")
                //                       let primaryJobAsParent = columns[35].Replace("'", "")
                //                       let paceJobAsCustomerN = columns[46].Replace("'", "")
                //                       where !string.IsNullOrEmpty(iwmJobAsChild) &&
                //                             !string.IsNullOrEmpty(primaryJobAsParent) && !string.IsNullOrEmpty(paceJobAsCustomerN) 
                //                       select new
                //                       {
                //                           IwmJobAsChild = iwmJobAsChild,
                //                           PrimaryJobAsParent = primaryJobAsParent,
                //                           PaceJobAsCustomerN = paceJobAsCustomerN
                //                       };

                var iwmJobChildQuery = from columns in lines
                                       where columns.Length > 0 && columns.Length > 35 && columns.Length > 46 // check if all required columns are present
                                       let iwmJobAsChild = columns[0].Replace("'", "")
                                       let primaryJobAsParent = columns[35].Replace("'", "")
                                       let paceJobAsCustomerN = columns[46].Replace("'", "")
                                       where (!string.IsNullOrEmpty(iwmJobAsChild) && !string.IsNullOrEmpty(primaryJobAsParent) && !string.IsNullOrEmpty(paceJobAsCustomerN)) || // all columns have values
                                             (!string.IsNullOrEmpty(iwmJobAsChild) && string.IsNullOrEmpty(primaryJobAsParent) && !string.IsNullOrEmpty(paceJobAsCustomerN)) || // iwmJobAsChild and paceJobAsCustomerN have values but primaryJobAsParent is empty
                                             (!string.IsNullOrEmpty(iwmJobAsChild) && !string.IsNullOrEmpty(primaryJobAsParent) && string.IsNullOrEmpty(paceJobAsCustomerN)) // iwmJobAsChild and primaryJobAsParent have values but paceJobAsCustomerN is empty
                                       //(!string.IsNullOrEmpty(iwmJobAsChild) && string.IsNullOrEmpty(primaryJobAsParent) && string.IsNullOrEmpty(paceJobAsCustomerN))  // iwmJobAsChild have value but primaryJobAsParent and paceJobAsCustomerN is empty                       
                                       select new
                                       {
                                           IwmJobAsChild = iwmJobAsChild,
                                           PrimaryJobAsParent = primaryJobAsParent,
                                           PaceJobAsCustomerN = paceJobAsCustomerN
                                       };
                
                var dataTableQuery = from item in iwmJobChildQuery
                                     select new
                                     {
                                         Primary_Job_p = string.IsNullOrEmpty(item.PrimaryJobAsParent) ? item.IwmJobAsChild : item.PrimaryJobAsParent,
                                         IWMJob__Child = item.IwmJobAsChild
                                     };

                var dataTable1Query = from item in iwmJobChildQuery
                                      select new
                                      {
                                          CustomerProjectNumber = string.IsNullOrEmpty(item.PaceJobAsCustomerN) ? item.IwmJobAsChild : item.PaceJobAsCustomerN,
                                          IWMJobID = item.IwmJobAsChild
                                      };

                dataTableQuery.ToList().ForEach(x => dataTable.Rows.Add(x.Primary_Job_p, x.IWMJob__Child));
                dataTable1Query.ToList().ForEach(x => dataTable1.Rows.Add(x.CustomerProjectNumber, x.IWMJobID));

                using (SqlConnection sqlConn = (SqlConnection)Dts.Connections[connectionManager].AcquireConnection(null))
                {
                    //Get the existing data from the IWMJOB_DependencyC table
                    using (SqlDataAdapter adapter = new SqlDataAdapter("SELECT Primary_Job_p,IWMJob__Child FROM IWMJOB_DependencyC(nolock)", sqlConn))
                    {
                        DataTable existingData = new DataTable();
                        adapter.Fill(existingData);
                        
                        // Insert new rows that do not already exist in the table
                        var newRows = dataTable.AsEnumerable()
                            .Except(existingData.AsEnumerable(), DataRowComparer.Default);

                        if (newRows.Any())
                        {
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConn))
                            {
                                DataTable newDataTable = newRows.CopyToDataTable();
                                sqlBulkCopy.DestinationTableName = "IWMJOB_DependencyC";
                                sqlBulkCopy.ColumnMappings.Add("Primary_Job_p", "Primary_Job_p");
                                sqlBulkCopy.ColumnMappings.Add("IWMJob__Child", "IWMJob__Child");
                                sqlBulkCopy.WriteToServer(newDataTable);
                            }
                        }

                    }

                    // Get the existing data from the IWM_SNAPSHOT table
                    using (SqlDataAdapter adapter = new SqlDataAdapter("SELECT CustomerProjectNumber,IWMJobID FROM IWM_SNAPSHOT(nolock)", sqlConn))
                    {
                        DataTable existingData = new DataTable();
                        adapter.Fill(existingData);

                      
                        // Insert new rows that do not already exist in the table
                        var newRow = dataTable1.AsEnumerable()
                            .Except(existingData.AsEnumerable(), DataRowComparer.Default);

                        if (newRow.Any())
                        {
                            using (SqlBulkCopy sqlBulkCopy = new SqlBulkCopy(sqlConn))
                            {
                                DataTable newDataTable = newRow.CopyToDataTable();
                                sqlBulkCopy.DestinationTableName = "IWM_SNAPSHOT";
                                sqlBulkCopy.ColumnMappings.Add("CustomerProjectNumber", "CustomerProjectNumber");
                                sqlBulkCopy.ColumnMappings.Add("IWMJobID", "IWMJobID");
                                sqlBulkCopy.WriteToServer(newDataTable);
                            }
                        }
                    }

                }
                // Move the processed file
                string sourceFilePath = Path.Combine(sourceFolderPath, fileName);
                File.Move(sourceFilePath, archiveFilePath);

                // Set the Script Task's success flag
                Dts.TaskResult = (int)ScriptResults.Success;
            }
            catch (Exception ex)
            {
                // Log the exception message
                Dts.Events.FireError(-1, "Error in Script Task", ex.Message, String.Empty, 0);


                // Set the Script Task's failure flag
                Dts.TaskResult = (int)ScriptResults.Failure;
            }


        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_8d04e4c49d884517917ccfdba4a49ab2</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_8d04e4c49d884517917ccfdba4a49ab2</msb:DisplayName>
    <msb:ProjectId>{6DA0DEE0-746B-46FA-9218-DA202F2B0730}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_8d04e4c49d884517917ccfdba4a49ab2.csproj" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="packages.config" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="cbb518a13caf4282bcf5766b7f01764b">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:ColumnNumber>17</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:LineNumber>117</msb:LineNumber>
      <msb:Condition>
      </msb:Condition>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
    <msb:Breakpoint Include="24e2f45013af4b9fb48fffec48ace2a2">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>205</msb:LineNumber>
      <msb:ColumnNumber>28</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Settings.get_Default():ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Sett" +
    "ings")]

namespace ST_8d04e4c49d884517917ccfdba4a49ab2.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_8d04e4c49d884517917ccfdba4a49ab2.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_8d04e4c49d884517917ccfdba4a49ab2.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_8d04e4c49d884517917ccfdba4a49ab2.dll">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
CihWAAAKKAsAACsTEhESKAwAACssYxEKc1kAAAoTExESKA0AACsTFBETcgsFAHBvWwAAChETb1wA
AApyoAMAcHKgAwBwb10AAAomERNvXAAACnLMAwBwcswDAHBvXQAACiYRExEUb14AAAreDBETLAcR
E288AAAK3N4MERAsBxEQbzwAAArc3gwRCiwHEQpvPAAACtwHCCgzAAAKEQQoXwAACgIoKwAAChZv
YAAACt40ExUCKCsAAApvYQAAChVyJQUAcBEVb2IAAAp+YwAAChZvZAAACiYCKCsAAAoXb2AAAAre
ACoAAEGsAAACAAAAwQAAAEwAAAANAQAADAAAAAAAAAACAAAAcAMAAE4AAAC+AwAADAAAAAAAAAAC
AAAALwMAAJ0AAADMAwAADAAAAAAAAAACAAAAJwQAAE4AAAB1BAAADAAAAAAAAAACAAAA5gMAAJ0A
AACDBAAADAAAAAAAAAACAAAAIQMAAHABAACRBAAADAAAAAAAAAAAAAAAAAAAALkEAAC5BAAANAAA
ABwAAAEeAihlAAAKKh4CKBQAAAoqrn4OAAAELR5yTwUAcNAJAAACKD8AAApvZgAACnNnAAAKgA4A
AAR+DgAABCoafg8AAAQqHgKADwAABCoafhAAAAQqHgIoaAAACioucy0AAAaAEAAABCqqAnsUAAAE
b2kAAAoYjQ4AAAElFgNvagAACqIlFwNvawAACqJvbAAACiYqqgJ7FQAABG9pAAAKGI0OAAABJRYD
b20AAAqiJRcDb24AAAqib2wAAAomKi5zMwAABoAWAAAEKlYDjiwPA45pHyMxCAOOaR8u/gIqFipm
AwMWmnLBBQBwcioDAHBvMQAACnNvAAAKKn4DA29wAAAKHyOacsEFAHByKgMAcG8xAAAKc3EAAAoq
kgMDb3IAAApvcAAACh8umnLBBQBwcioDAHBvMQAACnNzAAAKKgAAABMwAQClAAAAAAAAAANvdAAA
Cm9yAAAKb3UAAAoodgAACi0fA290AAAKb3cAAAoodgAACi0NA294AAAKKHYAAAosbQNvdAAACm9y
AAAKb3UAAAoodgAACi0fA290AAAKb3cAAAoodgAACiwNA294AAAKKHYAAAosNwNvdAAACm9yAAAK
b3UAAAoodgAACi0eA290AAAKb3cAAAoodgAACi0MA294AAAKKHYAAAoqFioXKp4Db3QAAApvcgAA
Cm91AAAKA290AAAKb3cAAAoDb3gAAApzeQAACiqeA296AAAKKHYAAAotCANvegAACisGA297AAAK
A297AAAKc3wAAAoqngNvfQAACih2AAAKLQgDb30AAAorBgNvewAACgNvewAACnN+AAAKKgAAAEJT
SkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAGgOAAAjfgAA1A4AAAgPAAAjU3RyaW5n
cwAAAADcHQAAyAUAACNVUwCkIwAAEAAAACNHVUlEAAAAtCMAAFQHAAAjQmxvYgAAAAAAAAACAAAB
Vx2iCQkPAAAA+gEzABYAAAEAAABCAAAADQAAAB4AAAA7AAAAHgAAAH4AAAACAAAAPQAAAAkAAAAI
AAAAEAAAABEAAAAfAAAAAQAAAAgAAAABAAAAAwAAAA0AAAANAAAAAAAoCQEAAAAAAAYArQe6DAYA
PAi6DAYAxgacDA8ALg0AAAYADge7CQYAkAe7CQYAcQe7CQYAIwi7CQYAzQe7CQYA5ge7CQYAJQe7
CQYAQAdvCAYAjga6DAYATg5jCQYAYgacDAYA2gacDAYAWQecDAoAAQjXCAoAJgbXCAYAuQANAwYA
YgANAw4ASgyiAhIAKQp3DhIAaAx3DhIAJgXmAhIAyQ7mAhIA5A53DgYANwpjCQYAagljCQYAbwFj
CQYAqQacDAYABAzaDAYAVAqmCRYAeQYSCRYA9QYSCRYAQgaRCQYApgANAwYApAhjCQYA8AtjCQoA
AAnXCBoAcA2qBRoAOgWqBQYA8A6YAgYAswiYAg4A2gWiAgYAUAVjCRIA8AnmAgYA3wVjCQYAXAVj
CRIAhgnmAh4ARQVyCgYAcABjCRoA9A2qBRoAFAyqBRIAWgxBCiIAvg3mAiIAeQDmAiIAOgzmAiIA
kwDmAgYApQANAxIAzQl3DhIAiQh3DgYAgAWYAgoAJgzXCAYA1w67CRIABQrmAgAAAABUAgAAAAAB
AAEAAAEQAAEBAAA5AAEAAQAAARAAFwEAADkAAwAHAAABEAAtAQAAOQAFAA0AAAEQAMwBAAA5AAcA
EwAAARAAQwEAADkACgAaAAABEABZAQAAOQAMACAAAQAQAHsJdgFNAA4AJgAAABAA4Qw9DTkADgAo
AAABEACWDT0NkQAQACwAAwEAAB4OAAB1ABEALwADARAAFwAAADkAFAAvAAMhEAAJAwAAOQAWADIA
IQBbBCsAIQALBC8AIQBCAysAIQCKBC8AIQBoAysAIQC+Ay8AIQDzAysAIQBtBC8AIQChA7gAIQAj
BCsAIQDbAy8AIQA7BCsAIQCOAy8AEQBvCcoEEQAWBs8EEQD4BNQEBgbeAtgEVoAODtsEVoD2BdsE
BgAwBd8EBgDAAN8ENgBFAuMEFgABAOcEFgBMAPAEFgDrAP8EFgC2ARgFFgDiATsFFgD4AVMFFgAO
AnEFFgAkAoQFUCAAAAAAhgiyDUIEAQBYIAAAAACGCMsERwQBAGAgAAAAAIYYjwxiBAEAeCAAAAAA
xgCfDZcFAwC/IAAAAADGAAgFnAUEAPQgAAAAAMYAogh0AAQAiCEAAAAAhggsAEIEBACQIQAAAACG
CKQORwQEAJghAAAAAIYYjwxiBAQAsCEAAAAAxgCfDZcFBgD3IQAAAADGAAgFnAUHACwiAAAAAMYA
ogh0AAcAwCIAAAAAhgjLAEIEBwDIIgAAAACGCIECRwQHANAiAAAAAIYYjwxiBAcA6CIAAAAAxgCf
DZcFCQAvIwAAAADGAAgFnAUKAGQjAAAAAMYAogh0AAoA+CMAAAAAhgi5BEIECgAAJAAAAACGCI0O
RwQKAAgkAAAAAIYIagKgBAoAECQAAAAAhhiPDJYECgAwJAAAAADGAJ8NlwUNAJAkAAAAAMYACAWc
BQ4A6CQAAAAAxgCiCHQADgC7JQAAAACGCGAKQgQOAMMlAAAAAIYIpwRHBA4AyyUAAAAAhhiPDGIE
DgDkJQAAAADGAJ8NlwUQACsmAAAAAMYACAWcBREAYCYAAAAAxgCiCHQAEQD0JgAAAACGCNYLQgQR
APwmAAAAAIYIXQJHBBEABCcAAAAAhhiPDGIEEQAcJwAAAADGAJ8NlwUTAGMnAAAAAMYACAWcBRQA
mCcAAAAAxgCiCHQAFAAsKAAAAACGAIEJBgAUANQtAAAAAIYYjwwGABQA3C0AAAAAgxiPDAYAFADk
LQAAAACTCAAMoAUUABAuAAAAAJMI/gWmBRQAFy4AAAAAkwgKBqwFFAAfLgAAAACWCFwOswUVACYu
AAAAAIYYjwwGABUALi4AAAAAkRiVDLgFFQDcLQAAAACGGI8MBgAVADouAAAAAIMAOgK8BRUAZS4A
AAAAgwBJAsYFFgCQLgAAAACRGJUMuAUXANwtAAAAAIYYjwwGABcAnC4AAAAAgwAKANAFFwCyLgAA
AACDAFUA1gUYAMwuAAAAAIMA9ADiBRkA7C4AAAAAgwC/AfgFGgAULwAAAACDAOsBGAYbAMUvAAAA
AIMAAQItBhwA7S8AAAAAgwAXAkgGHQAVMAAAAACDAC0CWAYeAAAAAQC2DQAAAgDPBAAAAQBkCAAA
AQAwAAAAAgCoDgAAAQBkCAAAAQDPAAAAAgCFAgAAAQBkCAAAAQC9BAAAAgCRDgAAAwBuAgAAAQBk
CAAAAQBkCgAAAgCrBAAAAQBkCAAAAQDaCwAAAgBhAgAAAQBkCAAAAQBkCAAAAQDRDgAAAQDRDgAA
AQC2DQAAAQC2DQAAAQAwAAAAAQDPAAAAAQCaAQAAAQCaAQAAAQBeCQAAAQBeCQkAjwwBABEAjwwG
ABkAjwwKACkAjwwQADEAjwwQADkAjwwQAEEAjwwQAEkAjwwQAFEAjwwQAFkAjwwQAGEAjwwQAGkA
jwwGAIEAjwwVAIkAjwwGAJEAjwwGAPkAjwwGABkBjwwbAAwAWwQrAAwACwQvAHEAjwwGABQAXA5G
ABQAnw1QABwAXA5GABwAnw1QABQACAVgABwACAVgAHEAogh0ADEBRw57ADQAQgMrADQAigQvADwA
aAMrADwAvgMvAEQA8wMrAEQAbQQvAEQAoQO4AEwAXA5GAEwAnw1QAEwACAVgAFwAIwQrAFwA2wMv
AGQAOwQrAGQAjgMvAJkAFg5JAUEBbA1PAUkBVQlVAVEBWghcAVkBeg1gAWEBngVnATEB3QRsATEB
QA5yAWEBygVyAWwAjwwGALEAjwwQALEA0gV/AbEAAA6GAbEA5QSMAbEArwyRAWwAPgOWAbEA8gKc
AXEBWgYGAMkAjwwGAMkApg2gAYEBbgWmAXkBPgOvAXQAjwzBAZkB5AXHAXwAjwzBAZkBVQ7xAYQA
jwzBAYwAjwzBAZQAjwzBAZwAjwzBAaQAjwzBAawAjwzBAZkBwg4sA7QAjwzBAbwAqwhcA8QAjwzB
AcwAqwhcA0EB8A2HA6kBVQmNA7EBFwqUA8EAjwyZA7kBUAmgA8EBQwWmA9EBXA6yA5kBuw68A5kB
4A7eA9kAjwzpA8EBIAXvA9kAhQUQANkAgw37A+kBPgMBBNkAdwwJBPkBaggPBEEBaA4BAEEBLA4V
BOEAFAV0ADEBAg8bBAEChQweBJkAjwwGAIEB0w4nBAEBjwwtBCEBjwwGAMkANw41BNQAYApCBNQA
pwRHBBECPgNMBNwA1gtCBNwAXQJHBOQAjwxiBOQAsg1CBOwAjwxiBOwALABCBPQAjwxiBPQAywBC
BOQAywRHBDEB+g6JBOwApA5HBPQAgQJHBPwAjwyWBPwAjQ5HBPwAuQRCBNQAjwxiBPwAagKgBNwA
jwxiBAgASADABAgATADFBCEAawBJBy4ACwCIBi4AEwCRBi4AGwCwBi4AIwC5Bi4AKwDiBi4AMwDi
Bi4AOwDiBi4AQwC5Bi4ASwDoBi4AUwDiBi4AWwD/BkEAawBJB0MAYwDFBGAAcwDFBGEAawBJB2MA
YwDFBIAAcwDFBIEAawBJB4MAYwDFBKAAcwDFBKEAawBJB6MAYwDFBMAAcwDFBMEAawBJB8MAYwDF
BOEAawBJB+MAYwDFBAEBawBJBwMBewDFBCABcwDFBCEBawBJByMBgwDFBEABcwDFBEEBawBJB2AB
cwDFBGEBawBJB4ABcwDFBIEBawBJB4MBYwDFBKEBawBJB6MBYwDFBMkBiwCwBuABcwDFBOkBiwCw
BgACcwDFBAECYwDFBCACcwDFBEACcwDFBMACcwDFBOACcwDFBAADcwDFBCADcwDFBIADcwDFBKAD
cwDFBMADcwDFBOADcwDFBEAEcwDFBGAEcwDFBIAEcwDFBKAEcwDFBDMAZgCOAKIAvADRAOwAAAEL
AQIAAQADAAMABAAFAAUABwAGAAoABwAMAAkADgAKABAAAAC2DWgGAADPBG0GAAAwAGgGAACoDm0G
AADPAGgGAACFAm0GAAC9BGgGAACRDm0GAABuAnIGAABkCmgGAACrBG0GAADaC2gGAABhAm0GAAAE
DHcGAAAeBn0GAABgDoMGAgABAAMAAgACAAUAAgAHAAcAAgAIAAkAAgANAAsAAgAOAA0AAgATAA8A
AgAUABEAAgAVABMAAgAaABUAAgAbABcAAgAgABkAAgAhABsAAgApAB0AAgAqAB8AAQArAB8AAgAs
ACEAIgA+AFgAcQB4AIUAmQCtAMkA4ADjAPcAeAG5AeMBFQJDAoUCsALoAgoDRQNRA3ADfAM7BFME
WgRqBHcEjgQEgAAAAQAAAEkh9VsAAAAAAAB2AQAABAAAAAAAAAAAAAAApQQAAwAAAAAOAAAAAAAA
AAAAAACuBLgIAAAAAAoAAAAAAAAAAAAAALcEKAMAAAAABAAAAAAAAAAAAAAApQTmAgAAAAAEAAAA
AAAAAAAAAAClBGMJAAAAAA4AAAAAAAAAAAAAAK4EvwIAAAAABAAAAAAAAAAAAAAApQTqBQAAAAAE
AAAAAAAAAAAAAAClBNINAAAAAAAAAAABAAAA6wwAAAsACAAMAAgADQAIAAAAAAAEAI0LAQAAAAQA
QAsAAAAABgB+CgEAAAAGALoLAAAAAAgAowoBAAAACAD2CgAAAAAKACkLAQAAAAoAngsCAAAACgDa
CgAAAAAMAFcLAQAAAAwAEgsAAAAADgBuCwEAAAAOAMgKhQDeAYkACQKJAC0CiQBlAoUAnAKJAM0C
iQD6AokAHAOXADwDlwBnA68A2QOxANkDtQDZAwAAAAAAPD45X18wXzAAPE1haW4+Yl9fMF8wADw+
Y19fRGlzcGxheUNsYXNzMF8wAGdldF88PmhfX1RyYW5zcGFyZW50SWRlbnRpZmllcjAAPD45X18w
XzEAPE1haW4+Yl9fMF8xAElFbnVtZXJhYmxlYDEAQWN0aW9uYDEARW51bWVyYWJsZVJvd0NvbGxl
Y3Rpb25gMQBEYXRhUm93Q29tcGFyZXJgMQBJRXF1YWxpdHlDb21wYXJlcmAxAExpc3RgMQBkYXRh
VGFibGUxAGdldF88PmhfX1RyYW5zcGFyZW50SWRlbnRpZmllcjEAPD45X18wXzIAPE1haW4+Yl9f
MF8yADw+Zl9fQW5vbnltb3VzVHlwZTBgMgA8PmZfX0Fub255bW91c1R5cGUxYDIAPD5mX19Bbm9u
eW1vdXNUeXBlMmAyADw+Zl9fQW5vbnltb3VzVHlwZTRgMgA8PmZfX0Fub255bW91c1R5cGU1YDIA
RnVuY2AyAFNUXzhkMDRlNGM0OWQ4ODQ1MTc5MTdjY2ZkYmE0YTQ5YWIyADw+aF9fVHJhbnNwYXJl
bnRJZGVudGlmaWVyMgA8PjlfXzBfMwA8TWFpbj5iX18wXzMAPD5mX19Bbm9ueW1vdXNUeXBlM2Az
ADw+OV9fMF80ADxNYWluPmJfXzBfNAA8PjlfXzBfNQA8TWFpbj5iX18wXzUAPD45X18wXzYAPE1h
aW4+Yl9fMF82ADw+OV9fMF83ADxNYWluPmJfXzBfNwA8TWFpbj5iX184ADw+OQA8TWFpbj5iX185
ADxNb2R1bGU+AGdldF9JV01Kb2JJRABnZXRfUGFjZUpvYkFzQ3VzdG9tZXJOAGdldF9wYWNlSm9i
QXNDdXN0b21lck4AU3lzdGVtLklPAE1pY3Jvc29mdC5WaXN1YWxCYXNpYy5GaWxlSU8ATWljcm9z
b2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAZ2V0X0VuZE9mRGF0
YQBtc2NvcmxpYgA8PmMAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMATWljcm9zb2Z0LlZpc3Vh
bEJhc2ljAEFkZAA8PD5oX19UcmFuc3BhcmVudElkZW50aWZpZXIwPmlfX0ZpZWxkADw8PmhfX1Ry
YW5zcGFyZW50SWRlbnRpZmllcjE+aV9fRmllbGQAPElXTUpvYklEPmlfX0ZpZWxkADxQYWNlSm9i
QXNDdXN0b21lck4+aV9fRmllbGQAPHBhY2VKb2JBc0N1c3RvbWVyTj5pX19GaWVsZAA8SVdNSm9i
X19DaGlsZD5pX19GaWVsZAA8SXdtSm9iQXNDaGlsZD5pX19GaWVsZAA8aXdtSm9iQXNDaGlsZD5p
X19GaWVsZAA8UHJpbWFyeV9Kb2JfcD5pX19GaWVsZAA8Q3VzdG9tZXJQcm9qZWN0TnVtYmVyPmlf
X0ZpZWxkADxjb2x1bW5zPmlfX0ZpZWxkADxQcmltYXJ5Sm9iQXNQYXJlbnQ+aV9fRmllbGQAPHBy
aW1hcnlKb2JBc1BhcmVudD5pX19GaWVsZABnZXRfSVdNSm9iX19DaGlsZABnZXRfSXdtSm9iQXND
aGlsZABnZXRfaXdtSm9iQXNDaGlsZABSZXBsYWNlAHNldF9UcmltV2hpdGVTcGFjZQBkZWZhdWx0
SW5zdGFuY2UAR2V0SGFzaENvZGUAZ2V0X01lc3NhZ2UAQ29weVRvRGF0YVRhYmxlAGRhdGFUYWJs
ZQBWYXJpYWJsZQBBc0VudW1lcmFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0
VHlwZUZyb21IYW5kbGUARmlsZQBzZXRfRGVzdGluYXRpb25UYWJsZU5hbWUAR2V0RmlsZU5hbWUA
TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBDb21iaW5lAHNldF9UZXh0RmllbGRUeXBl
AFdoZXJlAFN5c3RlbS5Db3JlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3Vy
Y2VDdWx0dXJlAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdz
QmFzZQBEaXNwb3NlAERlYnVnZ2VyQnJvd3NhYmxlU3RhdGUARWRpdG9yQnJvd3NhYmxlU3RhdGUA
Q29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBE
ZWJ1Z2dhYmxlQXR0cmlidXRlAERlYnVnZ2VyQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dz
YWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0
cmlidXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBEZWJ1Z2dlckhpZGRlbkF0dHJpYnV0ZQBB
c3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0
ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0
ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRy
aWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmli
dXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAU3FsQnVs
a0NvcHlDb2x1bW5NYXBwaW5nAFRvU3RyaW5nAEZvckVhY2gAUGF0aABNaWNyb3NvZnQuU3FsU2Vy
dmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBT
Y3JpcHRPYmplY3RNb2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfOGQwNGU0YzQ5ZDg4NDUx
NzkxN2NjZmRiYTRhNDlhYjIuZGxsAEZpbGwAZ2V0X0l0ZW0AaXRlbQBTeXN0ZW0ARW51bQByZXNv
dXJjZU1hbgBTY3JpcHRNYWluAERhdGFDb2x1bW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVt
Lkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24AU3FsQnVsa0NvcHlDb2x1bW5NYXBwaW5n
Q29sbGVjdGlvbgBEYXRhQ29sdW1uQ29sbGVjdGlvbgBEYXRhUm93Q29sbGVjdGlvbgBBY3F1aXJl
Q29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3Vs
dHVyZUluZm8AZ2V0X1ByaW1hcnlfSm9iX3AAU3lzdGVtLkxpbnEAPDw+aF9fVHJhbnNwYXJlbnRJ
ZGVudGlmaWVyMD5qX19UUGFyADw8PmhfX1RyYW5zcGFyZW50SWRlbnRpZmllcjE+al9fVFBhcgA8
SVdNSm9iSUQ+al9fVFBhcgA8UGFjZUpvYkFzQ3VzdG9tZXJOPmpfX1RQYXIAPHBhY2VKb2JBc0N1
c3RvbWVyTj5qX19UUGFyADxJV01Kb2JfX0NoaWxkPmpfX1RQYXIAPEl3bUpvYkFzQ2hpbGQ+al9f
VFBhcgA8aXdtSm9iQXNDaGlsZD5qX19UUGFyADxQcmltYXJ5X0pvYl9wPmpfX1RQYXIAPEN1c3Rv
bWVyUHJvamVjdE51bWJlcj5qX19UUGFyADxjb2x1bW5zPmpfX1RQYXIAPFByaW1hcnlKb2JBc1Bh
cmVudD5qX19UUGFyADxwcmltYXJ5Sm9iQXNQYXJlbnQ+al9fVFBhcgBnZXRfQ3VzdG9tZXJQcm9q
ZWN0TnVtYmVyAElGb3JtYXRQcm92aWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rpb25N
YW5hZ2VyAEV2ZW50c09iamVjdFdyYXBwZXIARGF0YVJvd0NvbXBhcmVyAFRleHRGaWVsZFBhcnNl
cgBEYkRhdGFBZGFwdGVyAFNxbERhdGFBZGFwdGVyAFdyaXRlVG9TZXJ2ZXIARmlyZUVycm9yAC5j
dG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAUmVhZEZpZWxkcwBTeXN0ZW0uUnVudGltZS5D
b21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU1RfOGQwNGU0YzQ5ZDg4NDUxNzkxN2Nj
ZmRiYTRhNDlhYjIuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVnZ2luZ01vZGVz
AFNUXzhkMDRlNGM0OWQ4ODQ1MTc5MTdjY2ZkYmE0YTQ5YWIyLlByb3BlcnRpZXMAZ2V0X1Zhcmlh
YmxlcwBHZXRGaWxlcwBnZXRfQ29sdW1uTWFwcGluZ3MAU2V0dGluZ3MARXF1YWxzAGdldF9Db2x1
bW5zAGdldF9jb2x1bW5zAERhdGFUYWJsZUV4dGVuc2lvbnMAU3lzdGVtLkRhdGEuRGF0YVNldEV4
dGVuc2lvbnMAZ2V0X0Nvbm5lY3Rpb25zAFNldERlbGltaXRlcnMAU3VjY2VzcwBnZXRfRHRzAFNj
cmlwdFJlc3VsdHMAZ2V0X0V2ZW50cwBnZXRfUm93cwBDb25jYXQARm9ybWF0AE9iamVjdABTZWxl
Y3QAZ2V0X0RlZmF1bHQAc2V0X1Rhc2tSZXN1bHQAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AGdldF9Q
cmltYXJ5Sm9iQXNQYXJlbnQAZ2V0X3ByaW1hcnlKb2JBc1BhcmVudABFeGNlcHQAVG9MaXN0AERh
dGFSb3cAeABnZXRfQXNzZW1ibHkAQW55AFNxbEJ1bGtDb3B5AERpcmVjdG9yeQBJc051bGxPckVt
cHR5AABRewB7ACAAYwBvAGwAdQBtAG4AcwAgAD0AIAB7ADAAfQAsACAAaQB3AG0ASgBvAGIAQQBz
AEMAaABpAGwAZAAgAD0AIAB7ADEAfQAgAH0AfQAAgIN7AHsAIAA8AD4AaABfAF8AVAByAGEAbgBz
AHAAYQByAGUAbgB0AEkAZABlAG4AdABpAGYAaQBlAHIAMAAgAD0AIAB7ADAAfQAsACAAcAByAGkA
bQBhAHIAeQBKAG8AYgBBAHMAUABhAHIAZQBuAHQAIAA9ACAAewAxAH0AIAB9AH0AAICDewB7ACAA
PAA+AGgAXwBfAFQAcgBhAG4AcwBwAGEAcgBlAG4AdABJAGQAZQBuAHQAaQBmAGkAZQByADEAIAA9
ACAAewAwAH0ALAAgAHAAYQBjAGUASgBvAGIAQQBzAEMAdQBzAHQAbwBtAGUAcgBOACAAPQAgAHsA
MQB9ACAAfQB9AACAm3sAewAgAEkAdwBtAEoAbwBiAEEAcwBDAGgAaQBsAGQAIAA9ACAAewAwAH0A
LAAgAFAAcgBpAG0AYQByAHkASgBvAGIAQQBzAFAAYQByAGUAbgB0ACAAPQAgAHsAMQB9ACwAIABQ
AGEAYwBlAEoAbwBiAEEAcwBDAHUAcwB0AG8AbQBlAHIATgAgAD0AIAB7ADIAfQAgAH0AfQAAXXsA
ewAgAFAAcgBpAG0AYQByAHkAXwBKAG8AYgBfAHAAIAA9ACAAewAwAH0ALAAgAEkAVwBNAEoAbwBi
AF8AXwBDAGgAaQBsAGQAIAA9ACAAewAxAH0AIAB9AH0AAGN7AHsAIABDAHUAcwB0AG8AbQBlAHIA
UAByAG8AagBlAGMAdABOAHUAbQBiAGUAcgAgAD0AIAB7ADAAfQAsACAASQBXAE0ASgBvAGIASQBE
ACAAPQAgAHsAMQB9ACAAfQB9AAARRgBpAGwAZQBQAGEAdABoAAALKgAuAGMAcwB2AAAnVQBzAGUA
cgA6ADoARgBpAGwAZQBFAHgAdABlAG4AcwBpAG8AbgAAJ1UAcwBlAHIAOgA6AEEAcgBjAGgAaQB2
AGUARgBvAGwAZABlAHIAAAEAN1UAcwBlAHIAOgA6AEMAbwBuAG4AZQBjAHQAaQBvAG4ATQBhAG4A
YQBnAGUAcgBOAGEAbQBlAAADLAAAG1AAcgBpAG0AYQByAHkAXwBKAG8AYgBfAHAAABtJAFcATQBK
AG8AYgBfAF8AQwBoAGkAbABkAAArQwB1AHMAdABvAG0AZQByAFAAcgBvAGoAZQBjAHQATgB1AG0A
YgBlAHIAABFJAFcATQBKAG8AYgBJAEQAAICFUwBFAEwARQBDAFQAIABQAHIAaQBtAGEAcgB5AF8A
SgBvAGIAXwBwACwASQBXAE0ASgBvAGIAXwBfAEMAaABpAGwAZAAgAEYAUgBPAE0AIABJAFcATQBK
AE8AQgBfAEQAZQBwAGUAbgBkAGUAbgBjAHkAQwAoAG4AbwBsAG8AYwBrACkAACVJAFcATQBKAE8A
QgBfAEQAZQBwAGUAbgBkAGUAbgBjAHkAQwAAf1MARQBMAEUAQwBUACAAQwB1AHMAdABvAG0AZQBy
AFAAcgBvAGoAZQBjAHQATgB1AG0AYgBlAHIALABJAFcATQBKAG8AYgBJAEQAIABGAFIATwBNACAA
SQBXAE0AXwBTAE4AQQBQAFMASABPAFQAKABuAG8AbABvAGMAawApAAAZSQBXAE0AXwBTAE4AQQBQ
AFMASABPAFQAAClFAHIAcgBvAHIAIABpAG4AIABTAGMAcgBpAHAAdAAgAFQAYQBzAGsAAHFTAFQA
XwA4AGQAMAA0AGUANABjADQAOQBkADgAOAA0ADUAMQA3ADkAMQA3AGMAYwBmAGQAYgBhADQAYQA0
ADkAYQBiADIALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAMnAAEA
AAAGlczPkXLRRrvi6ALBk9IrAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARE9BiABARGAiQgVEggC
EwATAQMGEwADBhMBCgcBFRIIAhMAEwEHFRKAlQETAAkAABUSgJUBEwAHIAICEwATAAcVEoCVARMB
BSABCBMACgcEEwATABMBEwECEwADIAAOAhMBCQADDhKAnQ4dHAgVEgwCEwATAQoHARUSDAITABMB
CBUSEAITABMBCgcBFRIQAhMAEwEKFRIUAxMAEwETAgMGEwIMBwEVEhQDEwATARMCBxUSgJUBEwIO
BwYTABMAEwETARMCEwICEwIIFRIYAhMAEwEKBwEVEhgCEwATAQgVEhwCEwATAQoHARUSHAITABMB
PQcWEjAODg4ODhUSUQEdDhUSVQEVEhgCDg4SWR0OEl0SYRJlFRJVARJpEm0SZRJhEmUVElUBEmkS
bRJlEnEFIAASgKEFIAASgKUGIAESgKkcAyAAHAYAAh0ODg4EAAEODgUgAg4ODgUAAg4ODgYVElEB
HQ4GIAEBEYC1BSABAR0OBCABAQIEIAAdDgUgAQETAAMgAAIFIAASgL0IAAESgMERgMUJIAISgMkO
EoDBBxUSeQIdDgIFIAIBHBgWEAECFRJVAR4AFRJVAR4AFRJ5Ah4AAgQKAR0ODRUSeQIdDhUSCAId
Dg4XEAICFRJVAR4BFRJVAR4AFRJ5Ah4AHgELCgIdDhUSCAIdDg4XFRJ5AhUSCAIdDg4VEgwCFRII
Ah0ODg4VCgIVEggCHQ4OFRIMAhUSCAIdDg4OIRUSeQIVEgwCFRIIAh0ODg4VEhACFRIMAhUSCAId
Dg4ODh8KAhUSDAIVEggCHQ4ODhUSEAIVEgwCFRIIAh0ODg4OFhUSeQIVEhACFRIMAhUSCAIdDg4O
DgITCgEVEhACFRIMAhUSCAIdDg4ODhwVEnkCFRIQAhUSDAIVEggCHQ4ODg4VEhQDDg4OGgoCFRIQ
AhUSDAIVEggCHQ4ODg4VEhQDDg4OERUSeQIVEhQDDg4OFRIYAg4ODwoCFRIUAw4ODhUSGAIODhEV
EnkCFRIUAw4ODhUSHAIODg8KAhUSFAMODg4VEhwCDg4PEAEBFRJRAR4AFRJVAR4ACAoBFRIYAg4O
CxUSgNEBFRIYAg4OChUSUQEVEhgCDg4KIAEBFRKA0QETAAgKARUSHAIODgsVEoDRARUSHAIODgoV
ElEBFRIcAg4OBSAAEoDVBiABEoDZHAQgARwcBiACAQ4SXQUgAQgSZQsAARUSgOUBEmkSZQkAABUS
gO0BEmkcEAEDFRJVAR4AFRJVAR4AFRJVAR4AFRKA8QEeAAQKARJpChABAQIVElUBHgAFIAEBEl0L
EAEBEmUVElUBHgAFIAASgPUHIAISgPkODgUgAQESZQUAAgEODgUgABKBAQIGDgggBQIIDg4OCAUg
ABKBBQcgAgEOEoEFBSAAEoEJBhUSGAIODgQgABMABCAAEwEGIAESaR0cBhUSHAIODgcVEggCHQ4O
ByACARMAEwEMFRIMAhUSCAIdDg4OERUSEAIVEgwCFRIIAh0ODg4OBAABAg4HFRIUAw4ODgkgAwET
ABMBEwIEIAATAgi3elxWGTTgiQiJhF3NgIDMkQiwP19/EdUKOgQAAAAABAEAAAAEBhKAgQQGEoCF
AwYSKAIGCAMGESwDBhJlAwYSNAgGFRJ5Ah0OAg4GFRJ5Ah0OFRIIAh0ODhgGFRJ5AhUSCAIdDg4V
EgwCFRIIAh0ODg4iBhUSeQIVEgwCFRIIAh0ODg4VEhACFRIMAhUSCAIdDg4ODhcGFRJ5AhUSEAIV
EgwCFRIIAh0ODg4OAh0GFRJ5AhUSEAIVEgwCFRIIAh0ODg4OFRIUAw4ODhIGFRJ5AhUSFAMODg4V
EhgCDg4SBhUSeQIVEhQDDg4OFRIcAg4OBCABAhwDIAAIBQAAEoCBBQAAEoCFBgABARKAhQQAABIo
AwAAAQkgAQEVEhgCDg4JIAEBFRIcAg4OBSABAh0OCyABFRIIAh0ODh0OFSABFRIMAhUSCAIdDg4O
FRIIAh0ODh8gARUSEAIVEgwCFRIIAh0ODg4OFRIMAhUSCAIdDg4OFCABAhUSEAIVEgwCFRIIAh0O
Dg4OGiABFRIUAw4ODhUSEAIVEgwCFRIIAh0ODg4ODyABFRIYAg4OFRIUAw4ODg8gARUSHAIODhUS
FAMODg4EKAATAAQoABMBBCgAEwIFCAASgIEFCAASgIUECAASKAgBAAgAAAAAAB4BAAEAVAIWV3Jh
cE5vbkV4Y2VwdGlvblRocm93cwEIAQACAAAAAAAoAQAjU1RfOGQwNGU0YzQ5ZDg4NDUxNzkxN2Nj
ZmRiYTRhNDlhYjIAAAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAyMwAASQEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC41AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRIuTkVUIEZyYW1ld29yayA0
LjUIAQAAAAAAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJl
YWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNL
ZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNl
U2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAAoXAAAAAAAAAAAAABCXAAAACAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAANFwAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQ
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAA
AAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAAAaBAAAAAAAAAAAAAAa
BDQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA9VtJIQAA
AQD1W0khPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBu
AGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIA
aQBuAGcARgBpAGwAZQBJAG4AZgBvAAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBv
AG0AbQBlAG4AdABzAAAAAAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAA
JAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAFQAXwA4AGQAMAA0AGUANABj
ADQAOQBkADgAOAA0ADUAMQA3ADkAMQA3AGMAYwBmAGQAYgBhADQAYQA0ADkAYQBiADIAAAA+AA8A
AQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4AOAA1ADIAMQAuADIAMwA1ADQAMQAA
AAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAFQAXwA4AGQAMAA0AGUANABjADQA
OQBkADgAOAA0ADUAMQA3ADkAMQA3AGMAYwBmAGQAYgBhADQAYQA0ADkAYQBiADIALgBkAGwAbAAA
AEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAA
QAAgACAAMgAwADIAMwAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAA
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADgAZAAwADQA
ZQA0AGMANAA5AGQAOAA4ADQANQAxADcAOQAxADcAYwBjAGYAZABiAGEANABhADQAOQBhAGIAMgAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA4AGQAMAA0AGUA
NABjADQAOQBkADgAOAA0ADUAMQA3ADkAMQA3AGMAYwBmAGQAYgBhADQAYQA0ADkAYQBiADIAAABC
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADgANQAyADEALgAyADMA
NQA0ADEAAAAAAEYADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADgANQAyADEALgAyADMANQA0ADEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAMAAAAVDwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="117"
            Column="17" />
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="205"
            Column="28" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="232,42"
          Id="Package\IWM_Tracking_ParentChildJobId"
          TopLeft="369.5,88.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>